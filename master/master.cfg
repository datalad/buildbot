# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

import local_setup

# Fetch any secret passwords.  We're using this trick so it is harder to save
# the secret passwords accidentally into version control
try:
    import secret_passwords
    reload(secret_passwords)
except ImportError:
    pass
else:
    for slavename, password in secret_passwords.slave_passes.items():
        local_setup.slave_passes[slavename] = password

# Check that slave names are unique
if len(set(local_setup.slave_passes)) != len(local_setup.slave_passes):
    raise ValueError('Slave names must be unique')


# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
# c['slaves'] = [buildslave.BuildSlave("example-slave", "pass")]
c['slaves' ] = [
    buildslave.DockerLatentBuildSlave('nd80', 'alis212',               # 'nd80', local_setup.slave_passes[],
                                      docker_host='tcp://172.17.42.1:4243', # local_setup.docker_host,
                                      image='datalad/buildbot:slave-nd80')
]

#BuildSlave(slave_name, slave_pass)# locks=slave_locks.get(slave_name, None))
    #for slave_name, slave_pass in local_setup.slave_passes.items()]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/datalad/datalad.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git://github.com/datalad/datalad.git', mode='incremental'))

factory.addStep(steps.ShellCommand(command=["git", "submodule", "update", "--init", "--recursive"]))
factory.addStep(steps.ShellCommand(command=["nosetests", "-s", "-v", "datalad"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      slavenames=['nd80'],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "DataLad"
c['titleURL'] = "http://datalad.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://smaug.datalad.org:8020/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
