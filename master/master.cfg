# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Global settings (might migrate into local_setup later)
master_url = "http://smaug.datalad.org:8010/"

gh_org_git = "git://github.com/datalad"
gh_datalad_git = gh_org_git + "/datalad"

docker_service = 'tcp://172.17.42.1:4243'
slave_port = 9989

# Some settings to get directly to c right away

c['title'] = "DataLad"
c['titleURL'] = "http://datalad.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://smaug.datalad.org:8020/"
# minimalistic config to activate new web UI
c['www'] = dict(port=8020, plugins=dict(waterfall_view={}, console_view={}))
c['db'] = { 'db_url' : "sqlite:///state.sqlite", }

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Apparently buildbot has issue with having .'s in the names, thus replacing
# dots with __
docker_slaves = ['docker-dl-' + x  for x in ['nd70', 'nd80', 'nd14_04']]

####### BUILDSLAVES

def load_passwords(fname):
    with open(fname) as f:
        return dict([(str(l).split()[0], str(l).split()[1]) for l in f.readlines()
                     if l.strip() != ''])

slave_passes = load_passwords('private/slave_passwords')
# FAKE passwords just to demonstrate the problem
#slave_passes = dict([(s, '123') for s in docker_slaves])

c['slaves'] = [
    buildslave.DockerLatentBuildSlave(slave, slave_passes[slave],
                                      docker_host=docker_service, # local_setup.docker_host,
                                      image='datalad/buildbot:slave-%s' % slave)
    for slave in docker_slaves
]

c['protocols'] = {'pb': {'port': slave_port}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        gh_datalad_git,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl=gh_datalad_git, mode='incremental'))
factory.addStep(steps.ShellCommand(command=["git", "submodule", "update", "--init", "--recursive"]))
factory.addStep(steps.ShellCommand(command=["nosetests", "-s", "-v", "datalad"]))
# and some tests with nose swallowing output
# TODO factory.addStep(steps.ShellCommand(command=["nosetests", "-v", "datalad/tests/test_cmd.py"]))

c['builders'] = [
    util.BuilderConfig(name="datalad-tests-%s" % slave,
      slavenames=[slave],
      factory=factory)
    for slave in docker_slaves
    ] # for now we have only docker slaves


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
code_builder_names = [str(b.name) for b in c['builders']]
c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=code_builder_names))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=code_builder_names))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# from buildbot.status.web import auth, authz
# http_auth = auth.HTPasswdAuth('../private/bot_htpasswords')
# 
# authz_cfg=authz.Authz(
#     auth = http_auth,
#     # change any of these to True to enable; 'auth' to require authorization'
#     # see the manual for more options
#     gracefulShutdown = False,
#     forceBuild = 'auth',
#     forceAllBuilds = 'auth',
#     pingBuilder = False,
#     stopBuild = 'auth',
#     stopAllBuilds = False,
#     cancelPendingBuild = 'auth',
# )
#
#c['status'].append(html.WebStatus(
#    http_port=8010,
#    authz=authz_cfg,
#    change_hook_dialects={'base': True}
#))
