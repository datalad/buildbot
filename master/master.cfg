# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Global settings (might migrate into local_setup later)
master_url = "http://smaug.datalad.org:8010/"

gh_org_git = "git://github.com/datalad"
gh_datalad_git = gh_org_git + "/datalad"

slave_port = 9989

# Some settings to get directly to c right away

c['title'] = "DataLad"
c['titleURL'] = "http://datalad.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://smaug.datalad.org:8020/"
# minimalistic config to activate new web UI
c['www'] = dict(port=8020, plugins=dict(waterfall_view={}, console_view={}))
c['db'] = { 'db_url' : "sqlite:///state.sqlite", }

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Apparently buildbot has issue with having .'s in the names, thus replacing
# dots with __

env = {}; execfile('private/slaves.py', {}, env)
slaves = env['slaves']


####### BUILDSLAVES

c['slaves'] = []
for name, info in slaves.iteritems():

    if info['type'] == 'docker':
        slave = buildslave.DockerLatentBuildSlave(
            name, info['password'],
            docker_host=info['docker_service'], # local_setup.docker_host,
            image='datalad/buildbot:slave-docker-dl-%s' % info['docker_base'].replace('.', '_'))
    elif info['type'] in ['virtualbox', 'native']:
        # Regular slave instance
        slave = buildslave.BuildSlave(
            name, info['password'])
    else:
        raise ValueError("Unknown type of a beast: %(type)s" % info)

    c['slaves'].append(slave)

c['protocols'] = {'pb': {'port': slave_port}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        gh_datalad_git,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

def datalad_test_steps():
    return [
        steps.ShellCommand(
            command=["git", "submodule", "update", "--init", "--recursive"]),
        steps.ShellCommand(command=["nosetests", "-s", "-v", "datalad"]),
    #    steps.ShellCommand(command=["nosetests", "-v", "datalad/tests/test_cmd.py"])
    ]

def datalad_factory(branch='master', deb=False):
    factory = util.BuildFactory()

    factory.addSteps([
        steps.Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl=gh_datalad_git,
            branch=branch,
            mode='full',  # 'full' for PRs I believe ;-)
            #method = 'clone', #'copy',
            codebase='datalad',
            retry=(5, 3)
        )] +
        datalad_test_steps())
    return factory

#factory = util.BuildFactory()
# check out the source
#factory.addStep(steps.Git(repourl=gh_datalad_git, mode='incremental'))
#factory.addSteps(get_code_test_steps())


c['builders'] = [
    util.BuilderConfig(name="datalad-tests-%s" % slave,
      slavenames=[slave],
      factory=datalad_factory())
    for slave in slaves.keys()
    ] # for now there is no "equivalent" slaves, thus just give all slaves


####### SCHEDULERS

datalad_codebases = {
    'datalad': {
            'repository': gh_datalad_git,
            'branch': None,
            'revision': None
            },
}

# reverse map (little to no clue -- just going after ethereum setup ;) -- 
# primarily for looking forward when we would get multiple repositories etc)
all_repositories = dict([(e['repository'],r) for r, e in datalad_codebases.iteritems()])

# Codebase generator
def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator


# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
code_builder_names = [str(b.name) for b in c['builders']]
c['schedulers'] = [
    schedulers.SingleBranchScheduler(
                            name="datalad-master",
                            change_filter=util.ChangeFilter(project='datalad', branch='master'),
                            codebases=datalad_codebases,
                            treeStableTimer=None,
                            builderNames=code_builder_names),
    schedulers.ForceScheduler(
                            name="datalad-forced",
                            codebases=datalad_codebases.keys(),
                            builderNames=code_builder_names)
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Setup interaction with github pull requests

c['schedulers'] += [
    # Pull requests
    schedulers.AnyBranchScheduler(
        name="datalad-pr",
        change_filter=util.ChangeFilter(project='datalad', category='pull-request'),
        codebases=datalad_codebases,
        treeStableTimer=60,
        builderNames=['datalad-pr-%s' % slave for slave in slaves.keys()]
        )
]


c['builders'] += [
    util.BuilderConfig(
        name="datalad-pr-%s" % slave,
        #builddir="build-cpp-ethereum-pr",
        slavenames=[slave],
        factory=datalad_factory(),
    )
    for slave in slaves.keys()
]

import json
from buildbot.status.github import GitHubStatus
from buildbot.process.properties import Interpolate
tokens = json.load(open("private/tokens.json"))
c['status'] += [
    GitHubStatus(
        token=tokens[repo]["token"],
        repoOwner=tokens[repo]["owner"],
        repoName=repo,
        sha=Interpolate("%(src:"+repo+":revision)s"),
        startDescription='DEV build started.',
        endDescription='DEV build done.')
    for repo in tokens
]

